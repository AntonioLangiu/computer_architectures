#########################################################################
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by	#
# the Free Software Foundation, either version 3 of the License, or		#
# (at your option) any later version.									#
# 																		#
# This program is distributed in the hope that it will be useful,		#
# but WITHOUT ANY WARRANTY; without even the implied warranty of		#
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the			#
# GNU General Public License for more details.							#
# 																		#
# You should have received a copy of the GNU General Public License		#
# along with this program.  If not, see <http://www.gnu.org/licenses/>.	#
#																		#
# Authors: Antonio Langiu, Edoardo Operti								#
#########################################################################
#!/bin/bash
set -e
base_dir=$(cd `dirname "$0"` && pwd -P)
#########################################################################
#                      CONFIGURABLE OPTIONS	                            #
# The default options will correctly work on MAC OSX                    #
#########################################################################
# base_ex_dir indicated the name of the folder used to store the exercises
base_ex_dir="exercises"
# default name for ASM files
# remember that DOS BOX will always save them in UPPERCASE
asm_file_name="EX.ASM"
# default name for EXE compiled files
exe_file_name="EX.EXE"
# configure this instruction with the correct instruction 
# for your operating system (this will work with OSX)
dosbox_exec="open -n -a DOSBOX --args -conf"
# configure the instruction that will be called to kill the DOXBOX
# instances on your system
dosbox_kill="killall DOSBox"
# default editor (the called instruction will be $editor file_name, so
# be sure that your editor is able to open a file in such way)
editor="vim"
# default DOS BOX mounted directory. It will be mounted as C:\
# make sure that this folder contains a MASM 
dosbox_home="$base_dir/dosbox_home/"


# TODO check this lines
dosbox_noscript_conf="$base_dir/noscript.conf"
dosbox_temp_conf_name="temp.conf"

# proj_dir indicates the workspace folder
proj_dir="$dosbox_home/$base_ex_dir"

create() {
    if [ "$1" == "" ]; then
        echo "Please give a name for the exercise"
    fi

    mkdir "$1" || (echo "Impossible to create the folder $1"; exit 1)
	# This is the template for an assembly program compatible with MASM611
cat <<-EOF > "$1/$asm_file_name"
        .MODEL small
        .STACK
        .DATA

        .CODE
        .STARTUP

        .EXIT
        END
EOF
}

delete() {
    if [ "$1" == "" ]; then
       echo "You should give a name for the exercise"
    fi
    rm -r "$1" || echo "I can't remove the exercise folder!"
}

clean() {
    # TODO decide what to clean
    rm "$1/$dosbox_temp_conf_name"
}

compile() {
    if [ "$1" == "" ]; then
        echo "You should give a name for the exercise"
        return 
    fi
    ex_dir="$proj_dir/$1"
    # start compile asm
}

killcmd() {
    $dosbox_kill
}

edit() {
    $editor "$1/$asm_file_name"
}

doc() {
    doc="$1/README.md"
    if [ -f $doc ]; then
        if [ "$3" == "-s" ]; then
            cat $doc
            return
        fi
        $editor "$doc"
        return
    fi
cat <<EOF > $doc
# Exercise $ex_name

## Description
EOF
    cat <&0 >> $doc
}

debug() {
    if [ ! -f "$dosbox_noscript_conf" ]; then
        echo "set a correct noscript_conf file in the script"
    fi
    if [ "$1" == "" ]; then
        echo "you should give a name for the exercise"
        return
    fi
    val=""
    if [ "$2" == "-w" ];then
        watches=$(cat "$1/EX.ASM" | grep -E "DB|DW|[^A]DD|DQ" | cut -f 1 -d " ")
        while IFS=' ' read -r f
        do
            val="/CW?$f $val"
        done <<< "$watches"
        val="/CWC* $val"
        echo "Watches: "$val
    fi
create_temp_file $1 <<EOF
cd $base_ex_dir\\$ex_name
ml /Zi $asm_file_name
cv $val $exe_file_name
EOF
    cmd="$dosbox_exec $dosbox_param $temp_conf"
    $cmd
}

pwb() {
    if [ ! -f "$dosbox_noscript_conf" ]; then
        echo "set a correct noscript_conf file in the script"
    fi
    if [ "$1" == "" ]; then
        echo "you should give a name for the exercise"
        return
    fi
create_temp_file $1 <<EOF
cd $base_ex_dir\\$ex_name
pwb $asm_file_name
EOF
    cmd="$dosbox_exec $temp_conf"
    $cmd
}

build() {
    if [ "$1" == "" ]; then
        echo "you should give a name for the exercise"
        return
    fi
create_temp_file $1 <<EOF
cd $base_ex_dir\\$ex_name
ml /Zi $asm_file_name
EOF
    cmd="$dosbox_exec $temp_conf"
    $cmd
}

create_temp_file() {
    temp_conf="$1/$dosbox_temp_conf_name"
    # This will override the previous content
    cp "$dosbox_noscript_conf" "$temp_conf"
cat <<-EOF >> "$temp_conf"
mount c $dosbox_home
c:
SET PATH=C:\MASM611\BIN;C:\MASM611\BINR;%PATH%
SET INCLUDE=C:\MASM611\INCLUDE
SET INIT=C:\MASM611\INIT;%INIT%
SET HELPFILES=C:\MASM611\HELP\*.HLP
SET TMP=C:\MASM611\TMP
EOF

cat <&0 >> "$temp_conf"
}

usage() {
    echo "usage: $0 test_name [operations]"
	echo 
	echo " to see all the created exercises type"
	echo " > $0 list"
}

commands() {
    echo "Available operations for test $1 are:"
    echo "  create  creates a new exercise template"
    echo "  delete  delete the exercise"
    echo "  debug   starts DOS BOX, builds and starts code view (the debugger)"
	echo "  pwb     opens the file to edit inside MASM"
    echo "  build   builds the EX.ASM file"
    echo "          with -w tryies to detect and insert automatically the watches"
    echo "  clean   cleans the exercise dir from useless files"
    echo "  kill    kills all the running instances of DOS BOX"
    echo "  edit    opens the EX.ASM file with the configured editor (default: vim)"
    echo "  doc     generates a README.md file to provide documentation"
    echo "          with -s it shows the documentation if exists"
    echo "  rename  renames the exercise"
    echo "  cd      opens a new shell inside the exercise folder"
}

if [ ! -d "$proj_dir" ]; then
    mkdir -p "$proj_dir"
fi

if [ $# -lt 1 ]; then
    usage
    exit 1
fi
if [ "$1" == "list" ]; then
    ls -l $proj_dir
    exit 1
fi
ex_name="$1"
ex_dir="$proj_dir/$ex_name"
shift
if [ $# -lt 1 ]; then
    commands $ex_name
    exit 0
fi
cmd=$1
shift
case "$cmd" in
    create)
        create $ex_dir
        ;;
    delete) 
        delete $ex_dir
        ;;
    debug)
        debug $ex_dir $@
        ;;
    pwb)
        pwb $ex_dir
        ;;
    build)
        build $ex_dir
        ;;
    clean) 
        clean $ex_dir
        ;;
    kill)
        killcmd
        ;;
    edit)
        edit $ex_dir
        ;;
    doc)
        doc $ex_dir $@
        ;;
    rename)
        mv "$ex_dir" "$proj_dir/$1"
        ;;
    cd)
        cd $ex_dir
        echo "type exit to return to the previous shell"
        PS1="EXERCISE:$ex_name > " bash
        ;;
    *)
        commands $ex_name
        exit 0
esac
exit 1
